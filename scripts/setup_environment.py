#!/usr/bin/env python3
"""Script to securely set up the KryptoBot trading environment."""

import os
import sys
import getpass
from pathlib import Path
from typing import Dict, Any
from cryptography.fernet import Fernet

def create_encryption_key() -> bytes:
    """Create a new encryption key."""
    return Fernet.generate_key()

def get_user_input(prompt: str, secret: bool = False) -> str:
    """Get user input, optionally hiding it for sensitive data."""
    if secret:
        return getpass.getpass(prompt)
    return input(prompt)

def setup_environment() -> None:
    """Set up the trading environment securely."""
    print("KryptoBot Environment Setup")
    print("==========================")
    print("\nThis script will help you set up your trading environment securely.")
    print("All sensitive data will be stored in your .env file.\n")

    # Check if .env already exists
    env_path = Path('.env')
    if env_path.exists():
        response = input(".env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return

    # Generate encryption key
    encryption_key = create_encryption_key()

    # Collect configuration data
    config: Dict[str, Any] = {
        'API_KEYS': {
            'ALPACA_API_KEY': {
                'prompt': 'Enter your Alpaca API key: ',
                'secret': True
            },
            'ALPACA_SECRET_KEY': {
                'prompt': 'Enter your Alpaca secret key: ',
                'secret': True
            }
        },
        'BROKER_CONFIG': {
            'MT_SERVER': {
                'prompt': 'Enter MetaTrader server address: ',
                'secret': False
            },
            'MT_PORT': {
                'prompt': 'Enter MetaTrader server port: ',
                'secret': False
            },
            'MT_USERNAME': {
                'prompt': 'Enter MetaTrader username: ',
                'secret': False
            },
            'MT_PASSWORD': {
                'prompt': 'Enter MetaTrader password: ',
                'secret': True
            }
        },
        'EMAIL': {
            'EMAIL_USERNAME': {
                'prompt': 'Enter email address for notifications: ',
                'secret': False
            },
            'EMAIL_PASSWORD': {
                'prompt': 'Enter email password/app password: ',
                'secret': True
            }
        },
        'SECURITY': {
            'JWT_SECRET_KEY': {
                'value': Fernet.generate_key().decode(),
                'secret': True
            }
        }
    }

    # Create .env file
    print("\nCollecting configuration data...")
    env_contents = [
        "# KryptoBot Environment Configuration",
        "# Generated by setup_environment.py",
        "# DO NOT SHARE OR COMMIT THIS FILE",
        "",
        f"ENCRYPTION_KEY={encryption_key.decode()}",
        ""
    ]

    # Initialize Fernet cipher for encryption
    cipher = Fernet(encryption_key)

    # Collect and encrypt sensitive data
    for category, items in config.items():
        env_contents.append(f"\n# {category}")
        for key, settings in items.items():
            if 'prompt' in settings:
                value = get_user_input(settings['prompt'], settings['secret'])
            else:
                value = settings['value']
            
            if settings['secret']:
                # Encrypt sensitive data
                encrypted_value = cipher.encrypt(value.encode()).decode()
                env_contents.append(f"{key}={encrypted_value}")
            else:
                env_contents.append(f"{key}={value}")

    # Write configuration to .env file
    with open('.env', 'w') as f:
        f.write('\n'.join(env_contents))

    print("\nEnvironment setup complete!")
    print("Configuration saved to .env file")
    print("\nIMPORTANT: Keep your .env file secure and never commit it to version control!")

def verify_environment() -> None:
    """Verify that the environment is properly configured."""
    try:
        from config.security import secure_config
        print("\nVerifying environment configuration...")
        
        # Test Alpaca credentials
        alpaca_creds = secure_config.get_api_credentials('alpaca')
        print("✓ Alpaca credentials loaded successfully")
        
        # Test MetaTrader credentials
        mt_creds = secure_config.get_api_credentials('metatrader')
        print("✓ MetaTrader credentials loaded successfully")
        
        # Test JWT secret
        jwt_secret = secure_config.get_jwt_secret()
        print("✓ JWT secret key loaded successfully")
        
        print("\nAll configurations verified successfully!")
        
    except Exception as e:
        print(f"\nError verifying environment: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    setup_environment()
    verify_environment() 