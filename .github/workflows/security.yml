name: Security Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * *'  # Daily security scan

jobs:
  security-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit safety

    - name: Check secrets configuration
      id: check_secrets
      run: |
        # Check for required secrets
        missing_required=()
        if [ -z "${{ secrets.ALPACA_API_KEY }}" ]; then
          missing_required+=("ALPACA_API_KEY")
        fi
        if [ -z "${{ secrets.ALPACA_SECRET_KEY }}" ]; then
          missing_required+=("ALPACA_SECRET_KEY")
        fi
        
        if [ ${#missing_required[@]} -gt 0 ]; then
          echo "Warning: Missing required secrets: ${missing_required[*]}"
          echo "required_secrets_configured=false" >> $GITHUB_OUTPUT
        else
          echo "required_secrets_configured=true" >> $GITHUB_OUTPUT
        fi
        
        # Check for optional secrets
        missing_optional=()
        if [ -z "${{ secrets.EMAIL_USERNAME }}" ]; then
          missing_optional+=("EMAIL_USERNAME")
        fi
        if [ -z "${{ secrets.EMAIL_PASSWORD }}" ]; then
          missing_optional+=("EMAIL_PASSWORD")
        fi
        if [ -z "${{ secrets.MT_SERVER }}" ]; then
          missing_optional+=("MT_SERVER")
        fi
        
        if [ ${#missing_optional[@]} -gt 0 ]; then
          echo "Info: Missing optional secrets: ${missing_optional[*]}"
        fi

    - name: Run security tests
      run: |
        pytest tests/test_security.py -v --cov=. --cov-report=xml

    - name: Run Bandit security scan
      run: |
        bandit -r . -ll -ii -x tests/

    - name: Check dependencies for known vulnerabilities
      run: |
        safety check

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: security
        name: security-coverage
        fail_ci_if_error: true

    - name: Check file permissions
      run: |
        # Check config directory permissions if it exists
        test_dir=~/.kryptobot
        if [ -d "$test_dir" ]; then
          perms=$(stat -c %a "$test_dir")
          if [ "$perms" != "700" ]; then
            echo "Warning: Config directory has incorrect permissions: $perms"
          fi
        fi

    - name: Check for sensitive data exposure
      run: |
        # Check for common sensitive file patterns
        if find . -type f -exec grep -l -i "api[_-]key\|secret\|password\|token" {} \; | grep -v -E "(test_|\.env\.template|\.gitignore|\.github/workflows/)"; then
          echo "Warning: Potential sensitive data found in files"
          exit 1
        fi

    - name: Verify secure configurations
      run: |
        # Check TLS/SSL configurations
        if find . -type f -name "*.py" -exec grep -l "ssl=False\|verify=False\|check_hostname=False" {} \;; then
          echo "Error: Insecure SSL/TLS configurations found"
          exit 1
        fi

    - name: Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'KryptoBot'
        path: '.'
        format: 'HTML'
        args: >
          --failOnCVSS 7
          --enableRetired

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          dependency-check-report.html
          .coverage
          coverage.xml
        retention-days: 7

  security-audit:
    needs: security-tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security audit tools
      run: |
        pip install pip-audit pyup-safety

    - name: Run pip-audit
      run: |
        pip-audit

    - name: Check for security best practices
      run: |
        # Check for hardcoded secrets
        if git grep -l "api_key\|secret\|password\|token" -- "*.py" ":!tests/" ":!.env.template"; then
          echo "Error: Potential hardcoded secrets found"
          exit 1
        fi
        
        # Check for proper error handling
        if find . -type f -name "*.py" -exec grep -l "except:\|except Exception:" {} \;; then
          echo "Warning: Broad exception handling found"
          exit 1
        fi
        
        # Check for proper input validation
        if find . -type f -name "*.py" -exec grep -l "eval(\|exec(" {} \;; then
          echo "Error: Dangerous functions found"
          exit 1
        fi

    - name: Generate security report
      if: always()
      run: |
        echo "# Security Audit Report" > security-report.md
        echo "## Findings" >> security-report.md
        echo "### Dependency Vulnerabilities" >> security-report.md
        pip-audit --format markdown >> security-report.md
        echo "### Code Analysis" >> security-report.md
        bandit -r . -f md -ll -ii -x tests/ >> security-report.md

    - name: Upload security report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md
        retention-days: 7 